{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","redux/Contacts/contacts-operations.js","redux/Contacts/contacts-selectors.js","components/Form/ContactForm/ContactForm.js","components/Form/ContactList/ContactList.js","components/Form/Filter/Filter.js","Views/ContactsView.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","dispatch","fetchContactRequest","axios","get","then","data","fetchContactSuccess","catch","error","fetchContactError","message","name","number","contact","addContactRequest","post","addContactSuccess","addContactError","id","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","getFilter","state","contacts","filter","getAllContacts","items","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","ContactForm","useDispatch","useState","setName","setNumber","useSelector","contactsSelectors","useEffect","contactsOperations","hendelChangeName","useCallback","e","currentTarget","hendelChangeNumber","handleSubmit","preventDefault","map","alert","className","onSubmit","type","pattern","title","required","onChange","ContactList","Button","variant","color","onClick","onDeleteContact","Filter","contactsActions","target","ContactsView","Container"],"mappings":"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","file":"static/js/3.b8be3a8f.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import axios from 'axios'\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n    toggleContactRequest,\r\n    toggleContactSuccess,\r\n    toggleContactError\r\n} from './contacts-actions'\r\n\r\n// axios.defaults.baseURL = 'http://localhost:3000/'\r\n\r\nconst fetchContacts = () => dispatch => {\r\n    dispatch(fetchContactRequest())\r\n\r\n    axios\r\n        .get('/contacts')\r\n        .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n        .catch(error => dispatch(fetchContactError(error.message)))\r\n\r\n}\r\n\r\nconst addContacts = (name, number) => dispatch => {\r\n    const contact = { name, number }\r\n\r\n    dispatch(addContactRequest())\r\n\r\n    axios\r\n        .post('/contacts', contact)\r\n        .then(({ data }) => dispatch(addContactSuccess(data)))\r\n        .catch(error => dispatch(addContactError(error.message)))\r\n}\r\n\r\nconst deleteContacts = id => dispatch => {\r\n    dispatch(deleteContactRequest())\r\n\r\n    axios\r\n        .delete(`/contacts/${id}`)\r\n        .then(() => dispatch(deleteContactSuccess(id)))\r\n        .catch(error => dispatch(deleteContactError(error.message)))\r\n\r\n\r\n}\r\n\r\nconst toggleContacts = id => dispatch => {\r\n    dispatch(toggleContactRequest())\r\n\r\n    axios\r\n        .patch(`/contacts/${id}`)\r\n        .then(({ data }) => dispatch(toggleContactSuccess(data)))\r\n        .catch(error => dispatch(toggleContactError(error.message)))\r\n}\r\n\r\n// eslint-disable-next-line\r\nexport default {\r\n    fetchContacts,\r\n    addContacts,\r\n    deleteContacts,\r\n    toggleContacts,\r\n\r\n}","import { createSelector } from '@reduxjs/toolkit'\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nconst getVisibleContacts = createSelector(\r\n    [getAllContacts, getFilter],\r\n    (contacts, filter) => {\r\n        const normalizedFilter = filter.toLowerCase()\r\n        return contacts.filter((contacts) =>\r\n            contacts.name.toLowerCase().includes(normalizedFilter)\r\n        );\r\n    })\r\n\r\n// eslint-disable-next-line\r\nexport default {\r\n    getFilter,\r\n    getAllContacts,\r\n    getVisibleContacts,\r\n}","import { useState, useCallback, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport contactsOperations from '../../../redux/Contacts/contacts-operations'\r\nimport contactsSelectors from '../../../redux/Contacts/contacts-selectors'\r\n// import PropTypes from \"prop-types\";\r\nimport './ContactForm.css';\r\n\r\n// componentDidMount() {\r\n//     this.props.fetchContacts()\r\n// }\r\n\r\n// const mapStateToProps = state => ({\r\n//     contacts: contactsSelectors.getAllContacts(state)\r\n// });\r\n\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//     fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n//     onSubmit: (name, number) => dispatch(contactsOperations.addContacts(name, number))\r\n// })\r\n\r\nexport default function ContactForm() {\r\n    const dispatch = useDispatch()\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    const contacts = useSelector(contactsSelectors.getAllContacts)\r\n    useEffect(() => {\r\n        dispatch(contactsOperations.fetchContacts())\r\n    }, [dispatch])\r\n\r\n    const hendelChangeName = useCallback(e => {\r\n        setName(e.currentTarget.value)\r\n    }, []);\r\n    \r\n    const hendelChangeNumber = useCallback(e => {\r\n        setNumber(e.currentTarget.value)\r\n    }, []);\r\n\r\n    const handleSubmit = useCallback((e) => {\r\n        e.preventDefault();\r\n        if (contacts.map(({ name }) => name).includes(name)) {\r\n            alert(`${name} is already in contacts`)\r\n            return\r\n        }\r\n        dispatch(contactsOperations.addContacts(name, number))\r\n\r\n        setName('')\r\n        setNumber('')\r\n\r\n    }, [dispatch, name, number, contacts])\r\n\r\n\r\n    return (\r\n        <>\r\n            <form className=\"TaskEditor\" onSubmit={handleSubmit}>\r\n                <label className=\"TaskEditor_label\">Name</label>\r\n                <br />\r\n                <input\r\n                    className=\"TaskEditor_input\"\r\n                    type=\"text\"\r\n                    value={name}\r\n                    name=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                    onChange={hendelChangeName}\r\n                />\r\n                <br />\r\n                <label className=\"TaskEditor_label\">Number</label>\r\n                <br />\r\n                <input\r\n                    className=\"TaskEditor_input\"\r\n                    type=\"text\"\r\n                    value={number}\r\n                    name=\"number\"\r\n                    pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n                    title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n                    required\r\n                    onChange={hendelChangeNumber}\r\n                />\r\n                <br />\r\n                <button className=\"TaskEditor_button\" type=\"submit\">Add contact</button>\r\n            </form>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n// ContactForm.propTypes = {\r\n//     onSubmit: PropTypes.func.isRequired,\r\n// }","import PropTypes from \"prop-types\";\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport contactsOperations from '../../../redux/Contacts/contacts-operations'\r\nimport contactsSelectors from '../../../redux/Contacts/contacts-selectors'\r\nimport './ContactList.css'\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport default function ContactList() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const contacts = useSelector(contactsSelectors.getVisibleContacts)\r\n\r\n    const onDeleteContact = id => dispatch(contactsOperations.deleteContacts(id))\r\n\r\n    return (\r\n\r\n        <ul className=\"TaskList\"> {contacts.map(({ id, name, number }) => (\r\n            <li className=\"TaskList_item\" key={id}>\r\n                <p className=\"TaskList_text\">{name}: {number}</p>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    type=\"button\"\r\n                    onClick={() => onDeleteContact(id)}\r\n                >Delete</Button>\r\n            </li>\r\n        ))}\r\n        </ul>\r\n    )\r\n\r\n}\r\n\r\nContactList.propTypes = {\r\n    // onDeleteContact: PropTypes.func.isRequired,\r\n    contacts: PropTypes.arrayOf(PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n    })),\r\n}","// import PropTypes from \"prop-types\";\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport * as contactsActions from '../../../redux/Contacts/contacts-actions'\r\nimport contactsSelectors from '../../../redux/Contacts/contacts-selectors'\r\nimport './Filter.css'\r\n\r\nexport default function Filter() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const value = useSelector(contactsSelectors.getFilter)\r\n\r\n    const onChange = e => dispatch(contactsActions.changeFilter(e.target.value))\r\n\r\n    return (\r\n        <div>\r\n            <p className=\"Filter_text\">Find contacts by name</p>\r\n            <br />\r\n            <input\r\n                className=\"Filter_input\"\r\n                type=\"text\"\r\n                value={value}\r\n                onChange={onChange}\r\n            />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n// Filter.propTypes = {\r\n//     value: PropTypes.string.isRequired,\r\n//     onChangeFilter: PropTypes.func.isRequired,\r\n// };\r\n\r\n\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport Container from '../components/Container/index';\r\nimport ContactForm from '../components/Form/ContactForm/ContactForm';\r\nimport ContactList from '../components/Form/ContactList/ContactList';\r\nimport Filter from '../components/Form/Filter/Filter';\r\nimport { contactsOperations } from '../redux/Contacts/index';\r\n\r\nexport default function ContactsView() {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(contactsOperations.fetchContacts())\r\n\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <Container>\r\n            <ContactForm />\r\n            <Filter />\r\n            <ContactList />\r\n        </Container>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}